#include "sechead.h"
#include <stdio.h>
/**
 * main - main function to print elf section header
 * @argc: argument count
 * @argv: argument strings
 * Return: 0
 */
int main(int argc, char **argv)
{
	char *filename = NULL;
	elf32_hdr *myself = malloc(sizeof(elf32_hdr));
	/* elf64_hdr *myshelf = NULL; */
	/* elf32_sh *saxon = NULL; */
	/* elf64_sh *sanction = NULL; */
	ssize_t fd, fr;
	unsigned char buffer[BUFFALO];
	int tmp_e_class, endian;

	if (argc != 2)
		dprintf(STDERR_FILENO, "Usage: 1-hreadelf elf_filename\n"), exit(98);
	filename = argv[1];
	fd = open(filename, O_RDWR);
	if (fd < 0)
		dprintf(STDERR_FILENO, "Error: Cannot read from file\n"), exit(98);
	fr = read(fd, buffer, BUFFALO);
	if (fr < 0)
		dprintf(STDERR_FILENO, "Error: Cannot read from file\n"), exit(98);
	tmp_e_class = buffer[4], endian = buffer[5], close(fd);

	if (tmp_e_class == 1)
		create_saxon(myself, endian, filename);
	/* else if (tmp_e_class == 2)create_sanction(myshelf, endian, filename); */
	return (0);
}

/**
 * create_saxon - function to create elf section header info for 32-bit
 * @myself: struct database of the elf header file
 * @endian: struct database of the elf section file
 * @filename: file name
 */
void create_saxon(elf32_hdr *myself, int endian, char *filename)
{
        char *sect_names = NULL;
        FILE *elf_file = NULL;
        elf32_sh *saxon = malloc(sizeof(elf32_sh)); /* elf64_sh *sanction = NULL; */
        uint idx;
        long int tmp_offset;
	int i, sec_h;

        elf_file = fopen(filename, "r+");
        fread(myself, sizeof(elf32_hdr), 1, elf_file);
        /* note: read section name string table, read the header first */
	tmp_offset = 0;
	for (i = 3; i >= 0; i--)
	{
		printf("%02x\n", myself->start_sec_hl[i]);
		sec_h = myself->start_sec_hl[i];
		if (sec_h < 0)
			sec_h = sec_h + 256;
		tmp_offset = (tmp_offset * 256) + sec_h;
	}
	printf("myself->sec_h_str_index, little endian: %ld\n", tmp_offset);
	tmp_offset = tmp_offset + myself->sec_h_str_index * sizeof(elf32_hdr), printf("endian: %d\n", endian);
	fseek(elf_file, tmp_offset, SEEK_SET);
	printf("tmp_offset %ld\n", tmp_offset);

        fread(saxon, sizeof(elf32_sh), 1, elf_file);
	printf("here now");
        /* read the section, string data */
        sect_names = malloc(saxon->sh_size);
        if (sect_names == NULL)
                return;
        fseek(elf_file, saxon->sh_offset, SEEK_SET); /* seek_set: start of a file*/
        fread(sect_names, 1, saxon->sh_size, elf_file);

        /* print_saxon(myself); */
        /* read all section headers */
        for (idx = 0; idx < myself->num_sec_h; idx++)
        {
                const char *name = "";

                if (endian == 1)
                        tmp_offset = myself->start_sec_hl[0] + idx * sizeof(elf32_hdr);
                else if (endian == 2)
                        tmp_offset = myself->start_sec_hl[3] + idx * sizeof(elf32_hdr);
                fseek(elf_file, tmp_offset, SEEK_SET);
                fread(&saxon, 1, sizeof(elf32_hdr), elf_file);

                /* print section name */
                if (saxon->sh_name)
                        name = sect_names + saxon->sh_name;
                printf("%2u %s\n", idx, name);
        }
}
