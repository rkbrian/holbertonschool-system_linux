#include "sechead.h"

/**
 * print_saxon - function to print elf file section header
 * @elf_head: struct database of the elf file
 */
void print_saxon(elf32_hdr *elf_head)
{
        int nsh; /*i, j*/
        char *name = "                   ", *type = "                ";
        char *addr = "0000000000000000 ", *offs = "000000 ";

        if (magic_check(elf_head) > 0)
        {
                dprintf(STDERR_FILENO,
                        "Error: Not an ELF file - it has the wrong magic bytes at the start\n");
                exit(98);
        }
        nsh = elf_head->num_sec_h;
        printf("There are %d section headers, starting at offset 0x", nsh);
        print_shoff(elf_head), printf(":\n\nSection Headers:\n");
        printf("  [Nr] Name              Type            ");
        if (elf_head->e_class == 1)
                printf("Addr     Off    Size   ES Flg Lk Inf Al\n");
        else if (elf_head->e_class == 2)
                printf("Address          Off    Size   ES Flg Lk Inf Al\n");
        printf("%s%s%s%s\n", name, type, addr, offs);
}

/**
 * print_shoff - print the address of the start of section headers
 * @elf_head: struct database of the elf file
 */
void print_shoff(elf32_hdr *elf_head)
{
        int i, j = 0, end_i, k;

        if (elf_head->e_data == 1) /* little endian, digit position reverse */
                i = (4 * elf_head->e_class) - 1, end_i = -1, k = -1;
        else if (elf_head->e_data == 2) /* big endian, digit position in order */
                i = 0, end_i = 4 * elf_head->e_class, k = 1;
        while (i != end_i)
        {
                if (j > 0)
                        printf("%02x", elf_head->start_sec_hl[i]), j++;
                else if (elf_head->start_sec_hl[i] != 0)
                        printf("%x", elf_head->start_sec_hl[i]), j++;
                i = i + k;
        }
}

/**
 * magic_check - check if the ELF magic number is correct
 * @elf_head: struct database of the elf file
 * Return: 0 if no error, 1 if error
 */
int magic_check(elf32_hdr *elf_head)
{
        if (elf_head->e_magic[0] != EI_MAG0)
        {
                dprintf(STDERR_FILENO, "Error: ELF Header EI_MAG0 incorrect.\n");
                return (1);
        }
        if (elf_head->e_magic[1] != EI_MAG1)
        {
                dprintf(STDERR_FILENO, "Error: ELF Header EI_MAG1 incorrect.\n");
                return (1);
        }
        if (elf_head->e_magic[2] != EI_MAG2)
        {
                dprintf(STDERR_FILENO, "Error: ELF Header EI_MAG2 incorrect.\n");
                return (1);
        }
        if (elf_head->e_magic[3] != EI_MAG3)
        {
                dprintf(STDERR_FILENO, "Error: ELF Header EI_MAG3 incorrect.\n");
                return (1);
        }
        return (0);
}
void create_saxon(elf32_hdr *myself, int endian, char *filename)
{
        char *sect_names = NULL;
        FILE *elf_file = NULL;
        elf32_sh *saxon = (elf32_sh*)malloc(sizeof(elf32_sh)); /* elf64_sh *sanction = NULL; */
        uint idx;
        long int tmp_offset;

        elf_file = fopen(filename, "r+");
        fread(myself, sizeof(elf32_hdr), 1, elf_file);
        /* note: read section name string table, read the header first */
        printf("myself->sec_h_str_index %d\n",  myself->start_sec_hl[3]);
        if (endian == 1)
                tmp_offset = myself->start_sec_hl[0] + myself->sec_h_str_index * sizeof(elf32_hdr);
        else if (endian == 2)
                tmp_offset = myself->start_sec_hl[3] + myself->sec_h_str_index * sizeof(elf32_hdr);
        fseek(elf_file, tmp_offset, SEEK_SET);
        printf("tmp_offset %ld\n", tmp_offset);
        fread(saxon, sizeof(elf32_sh), 1, elf_file);
        printf("here now");
        /* read the section, string data */
        sect_names = malloc(saxon->sh_size);
        if (sect_names == NULL)
                return;
        fseek(elf_file, saxon->sh_offset, SEEK_SET); /* seek_set: start of a file*/
        fread(sect_names, 1, saxon->sh_size, elf_file);
	/* print section name */
	if (saxon->sh_name)
		name = sect_names + saxon->sh_name;
	printf("%2u %s\n", idx, name);
}
}
